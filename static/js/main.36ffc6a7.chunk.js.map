{"version":3,"sources":["actions/index.js","reducers/getPostsReducer.js","reducers/index.js","store/index.js","components/Picker.js","components/Posts.js","containers/App.js","index.js"],"names":["RECEIVE_POSTS","INVALID_SUBREDDIT","initialState","rootReducer","combineReducers","reducers","state","action","type","payload","middleware","thunk","store","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","Picker","value","onChange","options","e","target","map","option","Posts","posts","post","i","href","data","url","rel","title","App","handleChange","subreddit","props","getPosts","this","children","Component","mapDispatchToProps","searchValue","dispatch","fetch","then","result","json","catch","connect","render","document","getElementById"],"mappings":"uJAAaA,EAAgB,gBAChBC,EAAoB,oBCCpBC,EAAe,GCKbC,EAFKC,YAAgB,CAACC,SDDb,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCACtD,OAAQA,EAAOC,MACX,KAAKR,EACD,OAAOO,EAAOE,QAClB,KAAKR,EACD,OAAOC,EACX,QACI,OAAOI,MENbI,EAAa,CAACC,KAWLC,EATDC,YACZV,EAEAW,YACEC,IAAe,WAAf,EAAmBL,GACnBM,OAAOC,8BAAgCD,OAAOC,iC,sCCanCC,EAtBA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUC,EAApB,EAAoBA,QAApB,OACb,iCACE,6BAAKF,IACL,wBAAQC,SAAU,SAAAE,GAAC,OAAIF,EAASE,EAAEC,OAAOJ,QACjCA,MAAOA,EADf,SAEGE,EAAQG,KAAI,SAAAC,GAAM,OACjB,wBAAQN,MAAOM,EAAf,SACGA,GADyBA,YCMrBC,EAZD,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACZ,6BACGA,EAAMH,KAAI,SAACI,EAAMC,GAAP,OACT,6BAAY,mBAAGC,KAAMF,EAAKG,KAAKC,IAAKT,OAAO,SAASU,IAAI,aAA5C,SAA0DL,EAAKG,KAAKG,SAAvEL,SCCTM,E,4MACJC,aAAe,SAACC,GACd,EAAKC,MAAMC,SAASF,I,4CAGtB,WACE,OACE,gCACE,cAAC,EAAD,CAEEjB,SAAUoB,KAAKJ,aACff,QAAS,CACP,UACA,WACA,aACA,UACA,UACA,SACA,UACA,QACA,eAGHmB,KAAKF,MAAMhC,MAAMD,SAAS0B,KACzB,cAAC,EAAD,CAAOJ,MAAOa,KAAKF,MAAMhC,MAAMD,SAAS0B,KAAKU,WAE7C,gF,GA1BQC,aAqCZC,EAAqB,CACzBJ,SN1BsB,SAACK,GAAD,OAAiB,SAACC,GAhBvB,IAACR,EAiBlBQ,GAjBkBR,EAiBEO,EAjBY,SAACC,GACjCC,MAAM,4BAAD,OAA6BT,EAA7B,UACFU,MAAK,SAACC,GAAD,OAAYA,EAAOC,UACxBF,MAAK,SAAChB,GAAD,OACJc,EAAS,CACPrC,KAAMR,EACNS,QAASsB,OAGZmB,OAAM,kBACLL,EAAS,CACPrC,KAAMP,aMkCCkD,eARS,SAAC7C,GAAD,MAAY,CAClCA,WAOsCqC,EAAzBQ,CAA6ChB,GCxC5DiB,iBACE,cAAC,IAAD,CAAUxC,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFyC,SAASC,eAAe,W","file":"static/js/main.36ffc6a7.chunk.js","sourcesContent":["export const RECEIVE_POSTS = \"RECEIVE_POSTS\";\nexport const INVALID_SUBREDDIT = \"INVALID_SUBREDDIT\";\n\nconst fetchPosts = (subreddit) => (dispatch) => {\n  fetch(`https://www.reddit.com/r/${subreddit}.json`)\n    .then((result) => result.json())\n    .then((data) =>\n      dispatch({\n        type: RECEIVE_POSTS,\n        payload: data,\n      })\n    )\n    .catch(() =>\n      dispatch({\n        type: INVALID_SUBREDDIT,\n      })\n    );\n};\n\nexport const getPosts = (searchValue) => (dispatch) => {\n  dispatch(fetchPosts(searchValue));\n};\n","import {INVALID_SUBREDDIT,RECEIVE_POSTS} from '../actions'\r\n\r\nexport const initialState = [];\r\n\r\nexport const reducers = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case RECEIVE_POSTS:\r\n            return action.payload\r\n        case INVALID_SUBREDDIT:\r\n            return initialState \r\n        default:\r\n            return state\r\n    }\r\n}  ","import { combineReducers } from 'redux'\nimport { reducers } from './getPostsReducer'\n\n\n\nconst rootReducer = combineReducers({reducers})\n\nexport default rootReducer","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"../reducers\";\r\n// import { initialState } from \"./reducers\";\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n//   initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store\r\n\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Picker = ({ value, onChange, options }) => (\n  <span>\n    <h1>{value}</h1>\n    <select onChange={e => onChange(e.target.value)}\n            value={value}>\n      {options.map(option =>\n        <option value={option} key={option}>\n          {option}\n        </option>)\n      }\n    </select>\n  </span>\n)\n\nPicker.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.string.isRequired\n  ).isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n}\n\nexport default Picker\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Posts = ({posts}) => (\n  <ul>\n    {posts.map((post, i) =>\n      <li key={i}><a href={post.data.url} target=\"_blank\" rel=\"noreferrer\">{post.data.title}</a></li>\n    )}\n  </ul>\n)\n\nPosts.propTypes = {\n  posts: PropTypes.array.isRequired\n}\n\nexport default Posts\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Picker from \"../components/Picker\";\nimport Posts from \"../components/Posts\";\nimport { getPosts } from \"../actions/index\";\n\nclass App extends Component {\n  handleChange = (subreddit) => {\n    this.props.getPosts(subreddit);\n  };\n\n  render() {\n    return (\n      <div>\n        <Picker\n          // value={selectedSubreddit}\n          onChange={this.handleChange}\n          options={[\n            \"reactjs\",\n            \"frontend\",\n            \"javascript\",\n            \"reduxjs\",\n            \"backend\",\n            \"nodejs\",\n            \"mongodb\",\n            \"reduc\",\n            \"undefined\",\n          ]}\n        />\n        {this.props.state.reducers.data ? (\n          <Posts posts={this.props.state.reducers.data.children} />\n        ) : (\n          <h2>No Result. Please, enter a valid input!</h2>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  state,\n});\n\nconst mapDispatchToProps = {\n  getPosts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n// state.reducers.data.children\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store/index'\nimport App from './containers/App'\n\n\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}